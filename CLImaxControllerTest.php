<?php

require_once 'CLImax.php';
require_once 'TestClasses.php';

/**
 * Test class for CLImaxController.
 * Generated by PHPUnit on 2010-09-25 at 20:05:53.
 */
class CLImaxControllerTest extends PHPUnit_Framework_TestCase
{
    /**
     * Generates the argv/argc vars that php creates when using CLI.
     *
     * This is useful for converting a shell command string into argv/argc for testing so it can be passed into run().
     *
     * @param string command
     * @return array Assoc array with argv/argc.
     */
    public function generateArgvArgc($cmd)
    {
        $php = $_SERVER['PHP_COMMAND'];
        $cmd = "{$php} -r 'var_export(array(\"argv\" => \$argv, \"argc\" => \$argc));' {$cmd}";
        $argvArgc = `{$cmd}`;
        $loadArgvArgcCmd = "return {$argvArgc};";
        $argvArgc = eval($loadArgvArgcCmd);
        return $argvArgc;
    }
    public function testArgvArgcGen()
    {
        extract($this->generateArgvArgc("foo bar"));
        $this->assertEquals(array('-', 'foo', 'bar'), $argv);
        $this->assertEquals(3, $argc);

        extract($this->generateArgvArgc("a=b c"));
        $this->assertEquals(array('-', 'a=b', 'c'), $argv);
        $this->assertEquals(3, $argc);
    }

    public function testCreate()
    {
        $o = CLImaxController::create();
        $this->assertTrue( $o instanceof CLImaxController );
    }

    public function testDefaultEnvironment()
    {
        $_ENV = array('foo' => 'bar');

        $o = CLImaxController::create();
        $this->assertTrue($o->hasEnvironment('foo'));
        $this->assertEquals('bar', $o->getEnvironment('foo'));
    }

    public function testMergeEnvironment()
    {
        $_ENV = array('foo' => 'bar');

        $o = CLImaxController::create();

        // test merge w/no overwrite
        $o->mergeEnvironment(array('foo' => 'baz does not overwrite bar without force'));
        $this->assertEquals('bar', $o->getEnvironment('foo'));

        // test merge w/overwrite
        $o->mergeEnvironment(array('foo' => 'baz overwrites bar'), array('overwrite' => true));
        $this->assertEquals('baz overwrites bar', $o->getEnvironment('foo'));
    }

    public function testSetEnvironment()
    {
        $env = array('foo' => 'bar', 'boo' => 'baz');
        $o = CLImaxController::create();

        // test merge w/no overwrite
        $o->setEnvironment($env);
        $this->assertEquals($env, $o->getEnvironment());
    }

    public function testDefaultCommandRunsIfNoCommandsOrArgumentsSpecified()
    {
        $mock = $this->getMock('CLIHelloWorld', array('run'));
        $mock->expects($this->once())
                        ->method('run');

        $o = CLImaxController::create()
                               ->setDefaultCommand($mock)
                               ->runTest(array('foo'), 1);
    }

    public function testCommandRunsIfPresentInArgs()
    {
        extract($this->generateArgvArgc("hw"));

        $mock = $this->getMock('CLIHelloWorld', array('run'));
        $mock->expects($this->once())
                        ->method('run');

        $o = CLImaxController::create()
                               ->addCommand($mock, array('hw'))
                               ->runTest($argv, $argc);
    }

    public function testCommandGetsExpectedArguments()
    {
        extract($this->generateArgvArgc("repeat 1 2 3 4 5"));

        $ar = new CLIArgRepeater;
        $o = CLImaxController::create()
                               ->addCommand($ar, array('repeat'))
                               ->runTest($argv, $argc);
        $this->assertEquals(5, $o);
    }

    public function testDefaultCommandGetsAllArgumentsIfNoOtherCommandSpecified()
    {
        extract($this->generateArgvArgc("1 2 3 4 5"));

        $ar = new CLIArgRepeater;
        $o = CLImaxController::create()
                               ->setDefaultCommand($ar)
                               ->runTest($argv, $argc);
        $this->assertEquals(5, $o);
    }
}
